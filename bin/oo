#!/usr/bin/env php
<?php

// @todo: Rename all these variables to oo_app_*

// The application path.
$app_path = oo_get_enviroment_variable('OO_APPLICATION_PATH');

// The file name.
$app_cache_file = oo_get_enviroment_variable('OO_CACHE_FILE');

// The flags.
$app_flags = array();

// Application arguments.
$app_arguments = oo_parse_options($argv);

# Run the commands before anything.
oo_run_commands();

# If the file does not exist then we will create it.
if (!file_exists(oo_get_global_variable('cache_file'))) {
  $fh = fopen(oo_get_global_variable('cache_file'), 'w');
  fwrite($fh, '');
  fclose($fh);
}

# If the file is empty then we will put stuff in it.
# Also if we want to rebuild the cache.
if (filesize(oo_get_global_variable('cache_file')) === 0) {
  echo "The cache file does not exist so I will create one. This will take a moment.\n";
  echo "Type y + enter when you are ready and I will tell you when we are done.\n";
  oo_save_apps_array();
  echo "Finished\n\n";
}

# If rebuild otherwise thing
if (count($app_arguments) > 0) {
  oo_open_applications($app_arguments);
}
else if (count($app_arguments) == 0 && empty($app_flags)) {
  exec("open .");
}

/**
 * Get an enviroment variable.
 */
function oo_get_enviroment_variable($variable) {
  $var = getenv($variable);

  if (!$var) {
    echo "You need to set the global variable '$variable'\n";
    echo "To do so put this in your .bash_profile:\n";
    echo "export $variable=\"\$THE_VALUE_YOU_WANT\"\n\n";
    exit;
  }

  return $var;
}

###
 # Save a cache of the file stuff.
 #
function oo_open_applications($commandline_args) {
  $apps = oo_get_app_array();
  $to_open = array();

  # Get all the apps.
  foreach ($commandline_args as $potential) {
    # First search for an exact match
    if (in_array($potential, $apps)) {
      $to_open[] = $potential;
    }
    # Otherwise search for a related match and ask the user for which they want.
    else {
      $index = oo_similar_matches($potential, $apps);
      if (!$index) {
        continue;
      }
      $to_open[] = $apps[$index];
    }
  }

  foreach ($to_open as $app) {
    shell_exec("open -a \"{$app}.app\"");
  }
}

/**
 * Get similar matches and then do the rest of the UI.
 */
function oo_similar_matches($potential, $apps) {
  $input = preg_quote($potential, '~');
  $result = preg_grep('~' . $input . '~', $apps);
  $proper = 0;

  // If a result is not found then we will not continue with normal operations.
  if (empty($result)) {
    echo "$potential was not found in the app cache. Perhaps you need to rebuilt. Use the -rebuild flag.";
    return;
  }

  // If they typed yes then always use the first one.
  if (in_array('-y', oo_get_global_variable('flags'))) {
    return key($result);
  }

  echo "The choice $potential was not found. Please choose and id from the list\n";
  print_r($result);

  while (true) {
    // What did the use choose in the interface?
    $chosen_option = array_shift(fgetcsv(STDIN));

    if (array_key_exists($chosen_option, $result)) {
      $proper = $chosen_option;
      break;
    }

    $ids = implode(', ', array_keys($result));
    echo "That is not a proper id. Please chose one of the following: $ids.\n";
  }

  return $proper;
}

/**
 * Get an array of options. Optionally run their commands.
 */
function oo_parse_options(&$commandline_args) {
  // Pop the first element off the array as it isn't needed.
  array_shift($commandline_args);
  $options = array();

  foreach ($commandline_args as $key => $option) {
    if (strpos($option, '-') === 0) {
      $options[] = $option;
      unset($commandline_args[$key]);
    }
  }

  // Set the global flags variable.
  oo_set_global_variable('flags', $options);

  return array_values($commandline_args);
}

/**
 * Run a set of pre-determined commands.
 */
function oo_run_commands() {
  foreach (oo_get_global_variable('flags') as $arg) {
    if ($arg == '..') {
      exec ("open ..");
    }

    // List all the available apps.
    if ($arg == '-list') {
      echo "This should be the list";
      oo_print_debug(oo_get_app_array());
    }

    // We want to rebuild the cache so lets do that first.
    if ($arg == '-rebuild') {
      oo_save_apps_array();
    }

    // Show the help.
    if ($arg == '-help') {
      oo_show_help();
    }
  }
}

/**
 * Show the help text here
 */
function oo_show_help() {
  // Show help bro.
  echo "This should be the help but I don't have any yet. I'm terribly sorry.\n";
}

/**
 * Get an array of apps.
 */
function oo_get_app_array() {
  $lines = array();
  $fp = fopen(oo_get_global_variable('cache_file'), 'r');

  while (!feof($fp)) {
    # Read each line in one by one.
    $line = fgets($fp);

    # Clean up each app.
    $line = str_replace('.app', '', trim($line));
    $line_small_caps = strtolower($line);

    # Add to array.
    $lines[] = $line_small_caps;
  }

  fclose($fp);

  return $lines;
}

###
 # Save a cache of the file stuff.
 #
function oo_save_apps_array() {
  $path = oo_get_global_variable('path');

  $objects = new RecursiveIteratorIterator(
    new RecursiveDirectoryIterator($path),
    RecursiveIteratorIterator::SELF_FIRST
  );

  # Empty the file and start fresh.
  oo_truncate_file();
  $fh = fopen(oo_get_global_variable('cache_file'), 'a') or die("can't open file");

  foreach ($objects as $name => $object) {
    if (pathinfo($object, PATHINFO_EXTENSION) == 'app') {
      fwrite($fh, $object->getBasename() . "\n");
    }
  }

  fclose($fh);
}

###
 # Truncate the cache file.
 #
function oo_truncate_file() {
  $fh = fopen(oo_get_global_variable('cache_file'), 'w');
  fclose($fh);
}

###
 # Get a global oo variable.
 #
function oo_get_global_variable($var) {
  return $GLOBALS["app_{$var}"];
}

/**
 * Set a global oo variable.
 */
function oo_set_global_variable($var, $value) {
  $GLOBALS["app_{$var}"] = $value;
}

###
 # Print a mixed variable.
 #
function oo_print_debug($var, $separator = false) {
  print_r($var);
  echo "\n";

  if ($separator) {
    echo '-----------------------------------------------------';
  }
}
