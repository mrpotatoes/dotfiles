#!/bin/sh

# Some quick paths to use globally in include (source) files into bash scripts.
export DOTFILES="$HOME/.dotfiles"
export DOTFILES_CONFIG="$HOME/.dotfiles/config"
export DOTFILES_BIN="$HOME/.dotfiles/bin"
export DOTFILES_CUSTOM="$HOME/.dotfiles/custom"
export BASH_CONSTS="$HOME/.dotfiles/config/constants"
export WEBSERVER_CONSTS="$HOME/.dotfiles/config/webserver/paths"
export BASH_FUNCTIONS="$HOME/.dotfiles/config/bash_functions"

# Now do some includes.
source $HOME/.dotfiles/config/bash_includes

# ENVIROMENT VARIABLES
export PATH="$JOINED_PATHS:$PATH"
export EDITOR=vim
export JAVA_HOME="/Library/Java/Home/"
export CATALINA_HOME=/Applications/Developer/Tomcat
export HISTTIMEFORMAT="[%h/%d - %H:%M:%S] "
export LC_ALL="en_US.UTF-8"
export LANG="en_US"
export FIGNORE=DS_Store #Ignore the DS Store files when using bash.
export TERM=xterm-256color

# Add tab completion for `defaults read|write NSGlobalDomain`
# You could just use `-g` instead, but I like being explicit
complete -W "NSGlobalDomain" defaults

# Add 'killall' tab completion for common apps
complete -o "nospace" -W "Contacts Calendar Dock Finder Mail Safari iTunes SystemUIServer Terminal Twitter" killall

# If possible, add tab completion for many more commands
[ -f /etc/bash_completion ] && source /etc/bash_completion

# Modify cal
cal=`cal`; 
today=`date "+%e"`; 
alias cal="echo -en \"${cal/${today}/\033[1;32m${today}\033[0m}\"; echo \"\"";

# Use IF check to determine if using SEXY_PROMPT or not.
function parse_git_branch {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo " ("${ref#refs/heads/}")"
}

#http://sos.blog-city.com/mac_os_x__bash_customize_your_terminal_prompt_a_little_color.htm
#PS1="\[\e[0;32m\]\u:\[\e[0m\] [[\[\e[41m\]\w\[\e[0m\]]]: "
#PS1="\e[1;34m\u@\h \w> \e[m"
#PS1="\[\e[36;1m\]\u@\[\e[32;1m\]\H> \[\e[0m\]"
#PS1="\[\033[36m\][\t] \[\033[1;33m\]\u\[\033[0m\] \[\033[36m\][\w]:\[\033[0m\] " 
PS1="\[\033[1;33m\]\u\[\033[0m\] \[\033[36m\][\W\[\033[1;33m\]$(parse_git_branch)\[\033[0m\]]:\[\033[0m\] " 

cdup()
{
  if [[ $# -eq 0 ]]
	then
	  cd ..
	  
	else
	  for (( c=1; c<=$1; c++ ))
      do
	      cd ..
      done
  fi
}
